[{"F:\\codebase\\signup-form-react-fluentui\\signup-form-react-fluentui\\src\\index.tsx":"1","F:\\codebase\\signup-form-react-fluentui\\signup-form-react-fluentui\\src\\reportWebVitals.ts":"2","F:\\codebase\\signup-form-react-fluentui\\signup-form-react-fluentui\\src\\App.tsx":"3"},{"size":449,"mtime":1609847880433,"results":"4","hashOfConfig":"5"},{"size":425,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":13662,"mtime":1609847943122,"results":"8","hashOfConfig":"5"},{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"rwowix",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1wyk7au",{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},"F:\\codebase\\signup-form-react-fluentui\\signup-form-react-fluentui\\src\\index.tsx",[],["18","19"],"F:\\codebase\\signup-form-react-fluentui\\signup-form-react-fluentui\\src\\reportWebVitals.ts",[],["20","21"],"F:\\codebase\\signup-form-react-fluentui\\signup-form-react-fluentui\\src\\App.tsx",["22","23"],"import React from 'react';\nimport './App.css';\nimport { Stack, PrimaryButton, TextField, initializeIcons } from 'office-ui-fabric-react';\nimport 'office-ui-fabric-react/dist/css/fabric.css';\n\n//initialization of icons - without calling this function icons for DatePicker would not be shown\ninitializeIcons();\n\n//this interface contains description of state and properties for Dialog application\nexport interface IAccountDialogState {\n  firstName: string | undefined;\n  lastName: string | undefined;\n  email: string | undefined;\n  hcn: string | undefined;\n  addressLine1: string | undefined;\n  addressLine2: string | undefined;\n  city: string | undefined;\n  state: string | undefined;\n  postalCode: string | undefined;\n  phoneNumber: string | undefined;\n\n  errors:{\n    firstName: string | undefined,\n    lastName: string | undefined,\n    hcn: string | undefined,\n    email: string | undefined\n    addressLine1: string | undefined;\n    addressLine2: string | undefined;\n    city: string | undefined;\n    state: string | undefined;\n    postalCode: string | undefined;\n    phoneNumber: string | undefined;\n  }\n}\n\nclass AccountDialog extends React.Component<IAccountDialogState, IAccountDialogState> {\n  constructor(props: IAccountDialogState) {\n    super(props);\n\n    //passing of data from properties to state of control during initialization\n    this.state = {\n      firstName: \"\",\n      lastName: \"\",\n      hcn: \"\",\n      email: \"\",\n      addressLine1: \"\",\n      addressLine2: \"\",\n      city: \"\",\n      state: \"\",\n      postalCode: \"\",\n      phoneNumber: \"\",\n\n      errors:{\n        firstName: \"\",\n        lastName: \"\",\n        hcn: \"\",\n        email: \"\",\n        addressLine1: \"\",\n        addressLine2: \"\",\n        city: \"\",\n        state: \"\",\n        postalCode: \"\",\n        phoneNumber: \"\"\n      }\n    };\n\n    this.onSubmit = this.onSubmit.bind(this);\n    this.validateNames = this.validateNames.bind(this);\n  }\n\n  validateEmail = (event:any): boolean => {\n      let val = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n      let emailAddress = event.target.value;\n      let error = this.state.errors;\n\n      if (emailAddress === null || emailAddress === undefined || emailAddress === \"\"){\n        this.setState({email: emailAddress});\n        error.email = \"Email is a required field\";\n        return false;\n      }\n      else if (val.test(emailAddress) ) {\n          this.setState({email: emailAddress});\n          error.email = \"\";\n          return true;\n      }\n      else {\n        this.setState({email: emailAddress});\n        error.email = \"Please enter a valid email id\";\n        return false;\n      }\n  }\n\n  validateNames = (event:any, originalLabel:string) : boolean => {\n    let id = event.target.id;\n    let value = event.target.value;\n    let label = originalLabel;\n    let name = event.target.name;\n    let isValid = true;\n    let prevErrorState = Object.assign({}, this.state.errors as Pick<IAccountDialogState, any>);\n\n    const regrexForAlpha = /^[a-zA-Z]+$/;\n    const regrexForAplhaNum = /^[a-zA-Z0-9]+$/;\n    const regrexForPhoneNum = /^[+]?(\\d{1,2})?[\\s.-]?\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}$/;\n\n    switch (id) {\n      case \"string\":\n        if (value === null || value === undefined || value === \"\"){\n          prevErrorState[name] = label + \" is a required field\";\n          this.setState({errors: prevErrorState} as Pick<IAccountDialogState, any>);\n          isValid = false;\n        }\n        else if (!regrexForAlpha.test(value)){\n          prevErrorState[name] = \"Please enter only characters\";\n          this.setState({errors: prevErrorState} as Pick<IAccountDialogState, any>);\n          isValid = false;\n        }\n        else \n          prevErrorState[name] = \"\";\n          this.setState({errors: prevErrorState} as Pick<IAccountDialogState, any>);\n          this.setState({[name]: value} as Pick<IAccountDialogState, any>);\n          isValid = true;\n        break;\n\n      case \"alphaNum\":\n        if (value === null || value === undefined || value === \"\"){\n          prevErrorState[name] = label + \" is a required field\";\n          this.setState({errors: prevErrorState} as Pick<IAccountDialogState, any>);\n          isValid = false;\n        }\n        else if (!regrexForAplhaNum.test(value)){\n          prevErrorState[name] = \"Please enter only alphanumeric characters\";\n          this.setState({errors: prevErrorState} as Pick<IAccountDialogState, any>);\n          isValid = false;\n        }\n        else \n          prevErrorState[name] = \"\";\n          this.setState({errors: prevErrorState} as Pick<IAccountDialogState, any>);\n          this.setState({[name]: value} as Pick<IAccountDialogState, any>);\n          isValid = true;\n        break;\n\n      case \"address\":\n        if (value === null || value === undefined || value === \"\"){\n          prevErrorState[name] = label + \" is a required field\";\n          this.setState({errors: prevErrorState} as Pick<IAccountDialogState, any>);\n          isValid = false;\n        }\n        else \n          prevErrorState[name] = \"\";\n          this.setState({errors: prevErrorState} as Pick<IAccountDialogState, any>);\n          this.setState({[name]: value} as Pick<IAccountDialogState, any>);\n          isValid = true;\n        break;\n      \n      case \"phonenumber\":\n        if (value === null || value === undefined || value === \"\"){\n          prevErrorState[name] = label + \" is a required field\";\n          this.setState({errors: prevErrorState} as Pick<IAccountDialogState, any>);\n          isValid = false;\n        }\n        else if (!regrexForPhoneNum.test(value)){\n          prevErrorState[name] = \"Please enter a valid phone number\";\n          this.setState({errors: prevErrorState} as Pick<IAccountDialogState, any>);\n          isValid = false;\n        }\n        else \n          prevErrorState[name] = \"\";\n          this.setState({errors: prevErrorState} as Pick<IAccountDialogState, any>);\n          this.setState({[name]: value} as Pick<IAccountDialogState, any>);\n          isValid = true;\n        break;\n      \n      default:\n        isValid = false;\n        break;\n    }\n\n    return isValid;\n  }\n\n  onSubmit = (e:any) => {\n    e.preventDefault();\n    let error = this.state.errors;\n\n    if ((this.state.firstName === undefined || this.state.firstName === \"\") && (this.state.lastName === undefined || this.state.lastName === \"\") && (this.state.email === undefined || this.state.email === \"\") && (this.state.hcn === undefined || this.state.hcn === \"\")\n    && (this.state.addressLine1 === undefined || this.state.addressLine1 === \"\") && (this.state.addressLine2 === undefined || this.state.addressLine2 === \"\") && (this.state.city === undefined || this.state.city === \"\") && (this.state.state === undefined || this.state.state === \"\")\n    && (this.state.postalCode === undefined || this.state.postalCode === \"\") && (this.state.phoneNumber === undefined || this.state.phoneNumber === \"\")){\n      error.firstName = \"First Name is a required field\";\n      error.lastName = \"Last Name is a required field\";\n      error.email = \"Email is a required field\";\n      error.hcn = \"HCN is a required field\";\n      error.addressLine1 = \"Address Line 1 is a required field\";\n      error.addressLine2 = \"Address Line 2 is a required field\";\n      error.city = \"City is a required field\";\n      error.state = \"State is a required field\";\n      error.postalCode = \"Postal Code is a required field\";\n      error.phoneNumber = \"Phone number is a required field\";\n    }\n    else if (this.state.firstName === undefined || this.state.firstName === \"\"){\n      error.firstName = \"First Name is a required field\";\n    }\n    else if (this.state.lastName === undefined || this.state.lastName === \"\"){\n      error.lastName = \"Last Name is a required field\";\n    }\n    else if (this.state.email === undefined || this.state.email === \"\"){\n      error.email = \"Email is a required field\";\n    }\n    else if (this.state.hcn === undefined || this.state.hcn === \"\"){\n      error.hcn = \"HCN is a required field\";\n    }\n    else if (this.state.phoneNumber === undefined || this.state.phoneNumber === \"\"){\n      error.phoneNumber = \"Phone number is a required field\";\n    }\n    else if (this.state.addressLine1 === undefined || this.state.addressLine1 === \"\"){\n      error.addressLine1 = \"Address Line 1 is a required field\";\n    }\n    else if (this.state.addressLine2 === undefined || this.state.addressLine2 === \"\"){\n      error.addressLine2 = \"Address Line 2 is a required field\";\n    }\n    else if (this.state.city === undefined || this.state.city === \"\"){\n      error.city = \"City is a required field\";\n    }\n    else if (this.state.state === undefined || this.state.state === \"\"){\n      error.state = \"State is a required field\";\n    }\n    else if (this.state.postalCode === undefined || this.state.postalCode === \"\"){\n      error.postalCode = \"Postal Code is a required field\";\n    }\n    else{\n      //post the data anywhere u want\n      (global as any).window.returnValue = this.state;\n      window.close();\n    }\n\n    this.setState({errors: error});\n  }  \n\n  //heart of application that returns React markup\n  render() {\n    return (\n      <>\n        <form onSubmit={this.onSubmit} >\n          <div className=\"ms-Grid\" dir=\"ltr\">\n            <div className=\"ms-Grid-row ms-mdOffset0 ms-lgOffset2 ms-xlOffset3 ms-xlOffset2\">\n              <div className=\"ms-Grid-col ms-sm12 ms-md6 ms-lg5 ms-xl5 parent\">\n              <TextField\n                  id=\"string\"\n                  name=\"firstName\"\n                  label=\"First Name\"\n                  placeholder=\"John\"\n                  value={this.state.firstName}\n                  onChange={(e) => this.validateNames(e, \"First Name\")}\n                  errorMessage={this.state.errors.firstName} />\n                <TextField\n                  id=\"string\"\n                  name=\"lastName\"\n                  label=\"Last Name\"\n                  placeholder=\"Doe\"\n                  value={this.state.lastName}\n                  onChange={(e) => this.validateNames(e, \"Last Name\")}\n                  errorMessage={this.state.errors.lastName} />\n                <TextField\n                  id=\"string\"\n                  name=\"email\"\n                  label=\"Email\"\n                  placeholder=\"johndoe@msdn.com\"\n                  input-type=\"email\"\n                  value={this.state.email}\n                  onChange={this.validateEmail}\n                  errorMessage={this.state.errors.email} />\n                <TextField\n                  id=\"alphaNum\"\n                  name=\"hcn\"\n                  label=\"HCN\"\n                  placeholder=\"123456\"\n                  value={this.state.hcn}\n                  onChange={(e) => this.validateNames(e, \"HCN\")}\n                  errorMessage={this.state.errors.hcn} />\n                <TextField\n                  id=\"phonenumber\"\n                  name=\"phoneNumber\"\n                  label=\"Phone Number\"\n                  placeholder=\"Your Phone Number\"\n                  value={this.state.phoneNumber}\n                  onChange={(e) => this.validateNames(e, \"Phone Number\")}\n                  errorMessage={this.state.errors.phoneNumber} />\n              </div>\n              <div className=\"ms-Grid-col ms-sm12 ms-md6 ms-lg5 ms-xl5 parent\">\n              <TextField\n                  id=\"address\"\n                  name=\"addressLine1\"\n                  label=\"Address line 1\"\n                  placeholder=\"Your Address line 1\"\n                  value={this.state.addressLine1}\n                  onChange={(e) => this.validateNames(e, \"Address line 1\")}\n                  errorMessage={this.state.errors.addressLine1} />\n                <TextField\n                  id=\"address\"\n                  name=\"addressLine2\"\n                  label=\"Address line 2\"\n                  placeholder=\"Your Address line 2\"\n                  value={this.state.addressLine2}\n                  onChange={(e) => this.validateNames(e, \"Address line 2\")}\n                  errorMessage={this.state.errors.addressLine2} />\n                <TextField\n                  id=\"address\"\n                  name=\"city\"\n                  label=\"City\"\n                  placeholder=\"Your City\"\n                  value={this.state.city}\n                  onChange={(e) => this.validateNames(e, \"City\")}\n                  errorMessage={this.state.errors.city} />\n                <TextField\n                  id=\"address\"\n                  name=\"state\"\n                  label=\"State\"\n                  placeholder=\"Your State\"\n                  value={this.state.state}\n                  onChange={(e) => this.validateNames(e, \"State\")}\n                  errorMessage={this.state.errors.state} />\n                <TextField\n                  id=\"address\"\n                  name=\"postalCode\"\n                  label=\"Postal Code\"\n                  placeholder=\"Your Postal Code\"\n                  value={this.state.postalCode}\n                  onChange={(e) => this.validateNames(e, \"Postal Code\")}\n                  errorMessage={this.state.errors.postalCode} />\n              </div>\n            </div>\n            <div className=\"ms-Grid-row\">\n              <Stack horizontal horizontalAlign={\"center\"} tokens={{ childrenGap: 20, padding: '30px 0px 0px 0px' }}>\n                <PrimaryButton id=\"btnCreateAccount\" text=\"Create Account\" type=\"submit\"/>\n                <PrimaryButton id=\"btnCancel\" text=\"Cancel\" onClick={() => {\n                    window.close();\n                }} />\n              </Stack>\n            </div>\n          </div>\n        </form>\n      </>);\n  }\n}\n\nexport default AccountDialog;",{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"24","replacedBy":"28"},{"ruleId":"26","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":72,"column":27,"nodeType":"32","messageId":"33","endLine":72,"endColumn":28,"suggestions":"34"},{"ruleId":"30","severity":1,"message":"31","line":72,"column":52,"nodeType":"32","messageId":"33","endLine":72,"endColumn":53,"suggestions":"35"},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],["36"],["37"],"no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["38","39"],["40","41"],"no-global-assign","no-unsafe-negation",{"messageId":"42","fix":"43","desc":"44"},{"messageId":"45","fix":"46","desc":"47"},{"messageId":"42","fix":"48","desc":"44"},{"messageId":"45","fix":"49","desc":"47"},"removeEscape",{"range":"50","text":"51"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"52","text":"53"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"54","text":"51"},{"range":"55","text":"53"},[1986,1987],"",[1986,1986],"\\",[2011,2012],[2011,2011]]